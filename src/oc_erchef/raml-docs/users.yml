#%RAML 0.8
---
description:
  View and add users to the Chef server.
get:
  is: [ versioned ]
  description:
    List all users on the Chef server.
  responses:
    200:
      body:
        application/json:
          example: |
            {
              "user1" : "https://chef.example/users/user1",
              "user2" : "https://chef.example/users/user2",
              "user3" : "https://chef.example/users/user3"
            }
post:
  is: [ versioned ]
  body:
    application/json:
      example: !include examples/users-post.json
      schema: !include schemas/users-post.json
  description:
    Create a new user
  responses:
    201:
      headers: !include common/location-header.yml
      body:
        application/json:
          example: |
            {
              "uri"=>"https://127.0.0.1/users/test4",
              "chef_key" : {
                "name" : "default",
                "public_key" : "-----BEGIN PUBLIC KEY-----",
                "private_key" : "-----BEGIN RSA PRIVATE KEY-----"
            }
    409:
/{user}:
  description:
    Manage individual, exisiting users.
  uriParameters:
    user:
      displayName: user
      description: Username of the user you wish to perform an action on.
      type: string
  get:
    is: [ versioned ]
    description: |
      Retrieve an individual, existing Chef user, including all defined fields.
      If an optional field is not defined, it will not be returned.
      No longer contains public key. Use the keys API to retrieve a key.
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "username" : "user1",
                "email" : "user1@chef.example",
                "display_name" : "Brian Boitano",
                "first_name" : "Brian",
                "last_name" : "Boitano"
              }
      404:
  put:
    is: [ versioned ]
    description: |
      Update an existing user. Note that user keys must now be updated via the keys API.
      You can no longer put the public_key field.
    body:
      application/json:
        example: !include examples/users-put.json
        schema: !include schemas/users-put.json
    responses:
      200:
        body:
          application/json:
            example: |
              {"uri" : "https://127.0.0.1/users/user1"}
      404:
      409:
  delete:
    is: [ versioned ]
    description:
      Delete an existing user.
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "username" : "user1",
                "email" : "user1@chef.example",
                "display_name" : "Brian Boitano",
                "first_name" : "Brian",
                "last_name" : "Boitano"
              }
      404:
  /keys: !include user-keys.yml
